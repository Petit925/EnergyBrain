import streamlit as st
from main_logic import search_index, build_prompt, ask_gpt

st.set_page_config(page_title="–ê—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–æ–º–ø–ª–∞—î–Ω—Å—É iC", page_icon="üìÑ")

st.title("üìÑ –ê—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–æ–º–ø–ª–∞—î–Ω—Å—É iC consulenten")
st.caption("(Compliance Assistant)")

# –°–µ—Å—ñ–π–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è —á–∞—Ç—É
if "messages" not in st.session_state:
    st.session_state.messages = []

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É
if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç"):
    st.session_state.messages = []
    st.experimental_rerun()

# –í–∏–≤—ñ–¥ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# –ü–æ–ª–µ –≤–≤–æ–¥—É
query = st.chat_input("–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç, —â–æ–¥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ–º–ø–ª–∞—î–Ω—Å—É —É iC consulenten:")

if query:
    # –í–∏–≤–æ–¥–∏–º–æ –∑–∞–ø–∏—Ç
    st.session_state.messages.append({"role": "user", "content": query})
    with st.chat_message("user"):
        st.markdown(query)

    # –í–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    with st.chat_message("assistant"):
        try:
            matches = search_index(query)
            prompt = build_prompt(query, matches)
            response = ask_gpt(prompt)
            st.markdown(response)
        except Exception as e:
            response = "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä API-–∫–ª—é—á—ñ —Ç–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Pinecone/OpenAI."
            st.error(str(e))

    st.session_state.messages.append({"role": "assistant", "content": response})
