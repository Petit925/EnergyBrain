import streamlit as st
from main_logic import search_index, build_prompt, ask_gpt

st.set_page_config(page_title="–ê—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–∫—É–ø—ñ–≤–ª—è–º –ù–ï–§–ö–û", page_icon="üìë")
st.title("üìë –ê—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–∫—É–ø—ñ–≤–ª—è–º –ù–ï–§–ö–û")
st.caption("(NEFCO Procurement Assistant)")

if "messages" not in st.session_state:
    st.session_state.messages = []

if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç"):
    st.session_state.messages = []
    st.experimental_rerun()

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

query = st.chat_input("–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç, —â–æ–¥–æ –∑–∞–∫—É–ø—ñ–≤–µ–ª—å —É –ø—Ä–æ–µ–∫—Ç–∞—Ö –ù–ï–§–ö–û:")

if query:
    st.session_state.messages.append({"role": "user", "content": query})
    with st.chat_message("user"):
        st.markdown(query)

    with st.chat_message("assistant"):
        try:
            matches = search_index(query, index_name="nefco-index")
            prompt = build_prompt(query, matches)
            response = ask_gpt(prompt)
            st.markdown(response)
        except Exception as e:
            response = "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä API-–∫–ª—é—á—ñ —Ç–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Pinecone/OpenAI."
            st.error(str(e))

    st.session_state.messages.append({"role": "assistant", "content": response})
