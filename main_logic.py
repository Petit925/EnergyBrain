import fitz  # PyMuPDF
import tiktoken
from openai import OpenAI
from pinecone import Pinecone
import streamlit as st

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –∫–ª—ñ—î–Ω—Ç—ñ–≤
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
pc = Pinecone(api_key=st.secrets["PINECONE_API_KEY"])


# üì• –ß–∏—Ç–∞–Ω–Ω—è PDF
def load_pdf_text(path):
    doc = fitz.open(path)
    return "\n".join([page.get_text() for page in doc])


# ‚úÇÔ∏è –†–æ–∑–±–∏—Ç—Ç—è —Ç–µ–∫—Å—Ç—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ max_tokens
def chunk_text(text, max_tokens=500):
    tokenizer = tiktoken.get_encoding("cl100k_base")
    tokens = tokenizer.encode(text)
    chunks = [tokens[i:i + max_tokens] for i in range(0, len(tokens), max_tokens)]
    return [tokenizer.decode(chunk) for chunk in chunks]


# üîÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–º–±–µ–¥—ñ–Ω–≥—ñ–≤
def embed_texts(texts):
    embeddings = []
    for chunk in texts:
        res = client.embeddings.create(input=[chunk], model="text-embedding-ada-002")
        embeddings.append((chunk, res.data[0].embedding))
    return embeddings


# ‚¨ÜÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Pinecone (—Ç—É—Ç `vectors` —É–∂–µ –ø–æ–≤–∏–Ω–Ω—ñ –º—ñ—Å—Ç–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ)
def upload_to_pinecone(vectors, index_name):
    index = pc.Index(index_name)
    index.upsert(vectors=vectors)


# üîç –ü–æ—à—É–∫ –≤ —ñ–Ω–¥–µ–∫—Å—ñ Pinecone
def search_index(query, top_k=5, index_name="energybrain-index", source_filter=None):
    index = pc.Index(index_name)

    res = client.embeddings.create(input=[query], model="text-embedding-ada-002")
    query_embed = res.data[0].embedding

    filter_dict = {"source": source_filter} if source_filter else None

    result = index.query(
        vector=query_embed,
        top_k=top_k,
        include_metadata=True,
        filter=filter_dict
    )

    return result["matches"]


# üß† –ü–æ–±—É–¥–æ–≤–∞ prompt-–∞
def build_prompt(query, results):
    context = "\n---\n".join([r["metadata"]["text"] for r in results])
    return f"""
–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –ø—É–±–ª—ñ—á–Ω–∏—Ö –∑–∞–∫—É–ø—ñ–≤–µ–ª—å. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —á—ñ—Ç–∫–æ, —Ç—ñ–ª—å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–ó–∞–ø–∏—Ç: {query}
–í—ñ–¥–ø–æ–≤—ñ–¥—å:
"""


# ü§ñ –í–∏–∫–ª–∏–∫ OpenAI
def ask_gpt(prompt):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content
